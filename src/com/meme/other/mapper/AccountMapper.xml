<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.meme.other.dao.mapper.AccountMapper" >
  <resultMap id="BaseResultMap" type="com.meme.other.bo.Account" >
    <id column="account_id" property="accountId" jdbcType="INTEGER" />
    <result column="total_gold_account" property="totalGoldAccount" jdbcType="INTEGER" />
    <result column="total_coin_account" property="totalCoinAccount" jdbcType="INTEGER" />
    <result column="allow_withdrawal" property="allowWithdrawal" jdbcType="INTEGER" />
    <result column="withdrawal_freeze" property="withdrawalFreeze" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="lastUpdateTime" property="lastupdatetime" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    account_id, total_gold_account, total_coin_account, allow_withdrawal, withdrawal_freeze, 
    create_time, lastUpdateTime, user_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from t_user_account
    where account_id = #{accountId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from t_user_account
    where account_id = #{accountId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.meme.other.bo.Account" >
    insert into t_user_account (account_id, total_gold_account, total_coin_account, 
      allow_withdrawal, withdrawal_freeze, create_time, 
      lastUpdateTime, user_id)
    values (#{accountId,jdbcType=INTEGER}, #{totalGoldAccount,jdbcType=INTEGER}, #{totalCoinAccount,jdbcType=INTEGER}, 
      #{allowWithdrawal,jdbcType=INTEGER}, #{withdrawalFreeze,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
      #{lastupdatetime,jdbcType=TIMESTAMP}, #{userId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.meme.other.bo.Account" >
    insert into t_user_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        account_id,
      </if>
      <if test="totalGoldAccount != null" >
        total_gold_account,
      </if>
      <if test="totalCoinAccount != null" >
        total_coin_account,
      </if>
      <if test="allowWithdrawal != null" >
        allow_withdrawal,
      </if>
      <if test="withdrawalFreeze != null" >
        withdrawal_freeze,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="lastupdatetime != null" >
        lastUpdateTime,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="accountId != null" >
        #{accountId,jdbcType=INTEGER},
      </if>
      <if test="totalGoldAccount != null" >
        #{totalGoldAccount,jdbcType=INTEGER},
      </if>
      <if test="totalCoinAccount != null" >
        #{totalCoinAccount,jdbcType=INTEGER},
      </if>
      <if test="allowWithdrawal != null" >
        #{allowWithdrawal,jdbcType=INTEGER},
      </if>
      <if test="withdrawalFreeze != null" >
        #{withdrawalFreeze,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastupdatetime != null" >
        #{lastupdatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.meme.other.bo.Account" >
    update t_user_account
    <set >
      <if test="totalGoldAccount != null" >
        total_gold_account = #{totalGoldAccount,jdbcType=INTEGER},
      </if>
      <if test="totalCoinAccount != null" >
        total_coin_account = #{totalCoinAccount,jdbcType=INTEGER},
      </if>
      <if test="allowWithdrawal != null" >
        allow_withdrawal = #{allowWithdrawal,jdbcType=INTEGER},
      </if>
      <if test="withdrawalFreeze != null" >
        withdrawal_freeze = #{withdrawalFreeze,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="lastupdatetime != null" >
        lastUpdateTime = #{lastupdatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.meme.other.bo.Account" >
    update t_user_account
    set total_gold_account = #{totalGoldAccount,jdbcType=INTEGER},
      total_coin_account = #{totalCoinAccount,jdbcType=INTEGER},
      allow_withdrawal = #{allowWithdrawal,jdbcType=INTEGER},
      withdrawal_freeze = #{withdrawalFreeze,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      lastUpdateTime = #{lastupdatetime,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=INTEGER}
    where account_id = #{accountId,jdbcType=INTEGER}
  </update>
</mapper>